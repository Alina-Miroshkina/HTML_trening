Сделать реализацию авторизации и регистрации пользователей

Реализация авторизации и регистрации пользователей включает в себя создание форм для ввода данных, обработку этих данных на сервере и управление сессиями пользователей. В этом примере мы создадим простую реализацию с использованием HTML, CSS и JavaScript для клиентской части, а также Node.js и Express для серверной части.

Клиентская часть
HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Example</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
        }
        .form-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .form-container h2 {
            margin-bottom: 20px;
        }
        .form-container input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .form-container button {
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .form-container button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="form-container" id="register-form">
        <h2>Register</h2>
        <input type="text" id="register-username" placeholder="Username">
        <input type="password" id="register-password" placeholder="Password">
        <button onclick="register()">Register</button>
        <p>Already have an account? <a href="#" onclick="showLoginForm()">Login</a></p>
    </div>
    <div class="form-container" id="login-form" style="display: none;">
        <h2>Login</h2>
        <input type="text" id="login-username" placeholder="Username">
        <input type="password" id="login-password" placeholder="Password">
        <button onclick="login()">Login</button>
        <p>Don't have an account? <a href="#" onclick="showRegisterForm()">Register</a></p>
    </div>
    <script src="auth.js"></script>
</body>
</html>
JavaScript (auth.js)

function showLoginForm() {
    document.getElementById('register-form').style.display = 'none';
    document.getElementById('login-form').style.display = 'block';
}

function showRegisterForm() {
    document.getElementById('register-form').style.display = 'block';
    document.getElementById('login-form').style.display = 'none';
}

async function register() {
    const username = document.getElementById('register-username').value;
    const password = document.getElementById('register-password').value;

    const response = await fetch('/register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, password })
    });

    const data = await response.json();
    if (data.success) {
        alert('Registration successful!');
        showLoginForm();
    } else {
        alert('Registration failed: ' + data.message);
    }
}

async function login() {
    const username = document.getElementById('login-username').value;
    const password = document.getElementById('login-password').value;

    const response = await fetch('/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, password })
    });

    const data = await response.json();
    if (data.success) {
        alert('Login successful!');
        // Перенаправление на главную страницу или другую страницу после успешного входа
    } else {
        alert('Login failed: ' + data.message);
    }
}
Серверная часть
Node.js и Express
Установите необходимые пакеты:

npm init -y
npm install express body-parser bcryptjs jsonwebtoken
Создайте файл server.js:

const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());

// Временное хранилище пользователей
const users = [];

// Регистрация
app.post('/register', async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).json({ success: false, message: 'Username and password are required' });
    }

    const existingUser = users.find(user => user.username === username);
    if (existingUser) {
        return res.status(400).json({ success: false, message: 'Username already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    users.push({ username, password: hashedPassword });

    res.json({ success: true, message: 'Registration successful' });
});

// Вход
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    const user = users.find(user => user.username === username);
    if (!user) {
        return res.status(400).json({ success: false, message: 'Invalid username or password' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
        return res.status(400).json({ success: false, message: 'Invalid username or password' });
    }

    const token = jwt.sign({ username: user.username }, 'your_jwt_secret', { expiresIn: '1h' });

    res.json({ success: true, message: 'Login successful', token });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
Объяснение
HTML:

Формы для регистрации и входа.
Кнопки для переключения между формами.
CSS:

Стили для форм и кнопок.
JavaScript (auth.js):

Функции для переключения между формами.
Функции для отправки данных на сервер для регистрации и входа.
Node.js и Express (server.js):

Установка необходимых пакетов.
Создание маршрутов для регистрации и входа.
Хранение пользователей в массиве (в реальном приложении используйте базу данных).
Хеширование паролей с помощью bcryptjs.
Генерация JWT токена для аутентификации.
Этот пример демонстрирует базовую реализацию авторизации и регистрации пользователей. Вы можете адаптировать его под свои нужды, добавив больше функциональности или изменив стили.
