 используем вашу HTML-структуру и добавим необходимые CSS-стили и JavaScript-класс для реализации слайдера.

### HTML-структура

Ваша HTML-структура выглядит следующим образом:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slider</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="sliderContainer" id="slider-container">
        <div class="navigationContainer">
            <div class="arrow arrowLeft">Prev</div>
            <div class="arrow arrowRight">Next</div>
        </div>
        <div class="slidesContainer">
            <img class="slide" src="https://avatars.mds.yandex.net/i?id=38626a0a842450fb09a1de88d86f2bfc_l-5334983-images-thumbs&n=13"/>
            <img class="slide" src="https://avatars.mds.yandex.net/i?id=38626a0a842450fb09a1de88d86f2bfc_l-5334983-images-thumbs&n=13"/>
            <img class="slide" src="https://avatars.mds.yandex.net/i?id=38626a0a842450fb09a1de88d86f2bfc_l-5334983-images-thumbs&n=13"/>
        </div>
        <div class="dotsContainer">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
    </div>
    <script src="slider.js"></script>
</body>
</html>
```

### CSS-стили

Добавим CSS-стили для вашей HTML-структуры:

```css
/* styles.css */
body {
    font-family: Arial, sans-serif;
}

.sliderContainer {
    position: relative;
    width: 100%;
    max-width: 100%;
    overflow: hidden;
}

.slidesContainer {
    display: flex;
    transition: transform 0.5s ease-in-out;
}

.slide {
    min-width: 300px;
    flex: 0 0 100%;
    max-width: 100%;
}

.navigationContainer {
    position: absolute;
    top: 50%;
    width: 100%;
    display: flex;
    justify-content: space-between;
    transform: translateY(-50%);
}

.arrow {
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 10px;
    cursor: pointer;
    font-size: 18px;
}

.dotsContainer {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

.dot {
    height: 15px;
    width: 15px;
    margin: 0 5px;
    background-color: #bbb;
    border-radius: 50%;
    cursor: pointer;
    transition: background-color 0.5s ease;
}

.dot.active {
    background-color: #717171;
}
```

### JavaScript-класс `Slider`

Создадим класс `Slider` для управления слайдером:

```javascript
// slider.js
class Slider {
    constructor(selector, images, autoPlay = false, delay = 3000) {
        this.sliderContainer = document.querySelector(selector);
        this.images = images;
        this.autoPlay = autoPlay;
        this.delay = delay;
        this.currentSlide = 0;
        this.init();
    }

    init() {
        this.createSlider();
        this.createNavigation();
        this.createDots();
        this.updateSlider();
        if (this.autoPlay) {
            this.startAutoPlay();
        }
    }

    createSlider() {
        const slidesContainer = this.sliderContainer.querySelector('.slidesContainer');
        slidesContainer.innerHTML = '';
        this.images.forEach(image => {
            const slide = document.createElement('img');
            slide.classList.add('slide');
            slide.src = image;
            slide.alt = `Slide ${this.images.indexOf(image) + 1}`;
            slidesContainer.appendChild(slide);
        });
        this.slidesContainer = slidesContainer;
    }

    createNavigation() {
        const navigationContainer = this.sliderContainer.querySelector('.navigationContainer');
        const prevButton = navigationContainer.querySelector('.arrowLeft');
        const nextButton = navigationContainer.querySelector('.arrowRight');
        prevButton.addEventListener('click', () => this.prevSlide());
        nextButton.addEventListener('click', () => this.nextSlide());
    }

    createDots() {
        const dotsContainer = this.sliderContainer.querySelector('.dotsContainer');
        dotsContainer.innerHTML = '';
        this.images.forEach((_, index) => {
            const dot = document.createElement('div');
            dot.classList.add('dot');
            dot.addEventListener('click', () => this.goToSlide(index));
            dotsContainer.appendChild(dot);
        });
        this.dots = dotsContainer.querySelectorAll('.dot');
    }

    updateSlider() {
        const offset = -this.currentSlide * 100;
        this.slidesContainer.style.transform = `translateX(${offset}%)`;
        this.updateDots();
    }

    updateDots() {
        this.dots.forEach((dot, index) => {
            dot.classList.toggle('active', index === this.currentSlide);
        });
    }

    nextSlide() {
        this.currentSlide = (this.currentSlide + 1) % this.images.length;
        this.updateSlider();
    }

    prevSlide() {
        this.currentSlide = (this.currentSlide - 1 + this.images.length) % this.images.length;
        this.updateSlider();
    }

    goToSlide(index) {
        this.currentSlide = index;
        this.updateSlider();
    }

    startAutoPlay() {
        this.autoPlayInterval = setInterval(() => {
            this.nextSlide();
        }, this.delay);
    }

    stopAutoPlay() {
        clearInterval(this.autoPlayInterval);
    }
}

// Пример использования
const images = [
    'https://avatars.mds.yandex.net/i?id=38626a0a842450fb09a1de88d86f2bfc_l-5334983-images-thumbs&n=13',
    'https://avatars.mds.yandex.net/i?id=38626a0a842450fb09a1de88d86f2bfc_l-5334983-images-thumbs&n=13',
    'https://avatars.mds.yandex.net/i?id=38626a0a842450fb09a1de88d86f2bfc_l-5334983-images-thumbs&n=13'
];

const slider = new Slider('#slider-container', images, true, 3000);
```

### Объяснение кода:

1. **HTML-структура**:
   - Создаем базовую структуру слайдера с контейнером, слайдами, навигацией и точками.

2. **CSS-стили**:
   - Определяем стили для контейнера слайдера, слайдов, навигации и точек.
   - Устанавливаем минимальную ширину слайдов в 300 пикселей.
   - Делаем переходы между слайдами плавными с помощью CSS-анимации.

3. **JavaScript-класс `Slider`**:
   - Конструктор принимает селектор DOM-узла, массив изображений, флаг автопрокрутки и задержку.
   - Метод `init` инициализирует слайдер, создает слайды, навигацию и точки, а также запускает автопрокрутку, если она включена.
   - Метод `createSlider` создает слайды и добавляет их в контейнер.
   - Метод `createNavigation` создает стрелки навигации и добавляет их в контейнер.
   - Метод `createDots` создает точки навигации и добавляет их в контейнер.
   - Метод `updateSlider` обновляет позицию слайдера и состояние точек.
   - Метод `updateDots` обновляет состояние точек в зависимости от текущего слайда.
   - Методы `nextSlide`, `prevSlide` и `goToSlide` управляют переходами между слайдами.
   - Методы `startAutoPlay` и `stopAutoPlay` управляют автопрокруткой.

### Пример использования:

- Создаем массив изображений.
- Создаем экземпляр класса `Slider` с указанными параметрами и запускаем автопрокрутку.

Этот класс предоставляет универсальное и повторно используемое решение для создания слайдера с плавными переходами и навигацией.
